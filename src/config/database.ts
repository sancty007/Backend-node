// Configuration de la base de donn√©es
// Pour l'instant, nous utilisons des donn√©es statiques
// Mais cette structure permet une future migration vers une vraie DB

// export type DatabaseConfig = {
//   host: string;
//   port: number;
//   database: string;
//   username: string;
//   password: string;
// };

// export const databaseConfig: DatabaseConfig = {
//   host: process.env.DB_HOST || "localhost",
//   port: Number.parseInt(process.env.DB_PORT || "5432"),
//   database: process.env.DB_NAME || "pokemon_api",
//   username: process.env.DB_USER || "postgres",
//   password: process.env.DB_PASSWORD || "",
// };

// // Classe pour g√©rer les connexions √† la base de donn√©es
// export class DatabaseConnection {
//   private static instance: DatabaseConnection;
//   private isConnected = false;

//   private constructor() {}

//   static getInstance(): DatabaseConnection {
//     if (!DatabaseConnection.instance) {
//       DatabaseConnection.instance = new DatabaseConnection();
//     }
//     return DatabaseConnection.instance;
//   }

//   async connect(): Promise<void> {
//     // Simulation d'une connexion √† la base de donn√©es
//     console.log("üîå Connexion √† la base de donn√©es...");
//     this.isConnected = true;
//     console.log("‚úÖ Base de donn√©es connect√©e");
//   }

//   async disconnect(): Promise<void> {
//     console.log("üîå D√©connexion de la base de donn√©es...");
//     this.isConnected = false;
//     console.log("‚úÖ Base de donn√©es d√©connect√©e");
//   }

//   isConnectedToDatabase(): boolean {
//     return this.isConnected;
//   }
// }
